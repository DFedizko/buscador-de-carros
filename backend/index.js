const fs = require('fs');
const path = require('path');
require('dotenv').config();
const express = require('express');
const { GoogleGenerativeAI } = require('@google/generative-ai'); // Importa LLM do google
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3001;
app.use(express.json());

const allowedOrigins = [process.env.FRONTEND_URL, "http://localhost:1337"];
if (process.env.NODE_ENV !== 'production') {
    allowedOrigins.push('http://localhost:1337');
}

app.use(cors({
  origin: function (origin, callback) {
    if (!origin || allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  }
}));

let todosOsCarros = [];
try {
  const filePath = path.join(__dirname, 'cars.json');
  const jsonData = fs.readFileSync(filePath, 'utf8');
  todosOsCarros = JSON.parse(jsonData);
  console.log(`${todosOsCarros.length} carros carregados do JSON.`);
} catch (e) {
  console.error('Erro ao carregar o arquivo carros.json:', e);
}

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
if (!GEMINI_API_KEY) console.error("Chave API n√£o encontrada! Verifique o arquivo backend/.env");

const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" })

app.get('/api/test', (req, res) => {
  res.json({ message: 'Ol√° do backend do DirigIA! Tudo funcionando!' });
});

app.post('/api/search', async (req, res) => {
  const userMessage = req.body.message;

  if (!userMessage) return res.status(400).json({ error: 'Nenhuma mensagem recebida no corpo da requisi√ß√£o.' });
  console.log('Mensagem recebida do usu√°rio:', userMessage);

  let extractedData;
  // Esta lista ser√° para os carros que correspondem EXATAMENTE (ou quase) ao pedido completo.
  let carrosFiltradosParaExibicaoExata = [];
  // Esta lista conter√° todos os carros do modelo/marca principal que o usu√°rio pediu, antes de aplicar pre√ßo/local exatos.
  let veiculosAlvoEncontradosNoEstoque = [];
  let aiFinalResponseText = "";

  try {
    // --- ETAPA 1: EXTRAIR ENTIDADES (sem mudan√ßas aqui) ---
    const extrationPrompt = `
      Voc√™ √© o "DirigIA", um assistente virtual especializado em ajudar usu√°rios a encontrar carros.
      Seu objetivo √© extrair as seguintes informa√ß√µes da mensagem do usu√°rio:
      - "vehicle_brand_or_name": A marca ou o nome do carro (ex: "BYD", "Volkswagen", "Dolphin").
      - "vehicle_model": O modelo espec√≠fico do carro, se mencionado e diferente do nome/marca (ex: "Polo", "HB20"). Se o nome j√° for o modelo (como "Dolphin"), pode repetir ou deixar null. 
      - "location": A cidade ou estado onde o usu√°rio procura o carro (ex: "S√£o Paulo", "Curitiba").
      - "price_approx": O valor aproximado que o usu√°rio mencionou, como um n√∫mero (ex: 100000).

      Se alguma informa√ß√£o n√£o for claramente mencionada, retorne null para o campo correspondente.
      Responda APENAS com um objeto JSON contendo esses campos. N√£o adicione nenhuma explica√ß√£o ou texto adicional fora do JSON.
      Mensagem do usu√°rio: "${userMessage}"
      JSON extra√≠do:
    `;
    const extractionResult = await model.generateContent(extrationPrompt);
    const extrationResponse = await extractionResult.response;
    const rawTextFromAIForExtration = extrationResponse.text();
    const cleanedTextForExtration = rawTextFromAIForExtration.replace(/^```json\s*|```\s*$/g, '').trim();
    extractedData = JSON.parse(cleanedTextForExtration);
    console.log('Dados extraidos pela IA:', extractedData);

    let baseCarList = [...todosOsCarros];

    if (extractedData.vehicle_brand_or_name) {
      const searchTerm = extractedData.vehicle_brand_or_name.toLowerCase();
      baseCarList = baseCarList.filter(carro =>
        carro.Name.toLowerCase().includes(searchTerm) || (carro.Model && carro.Model.toLowerCase().includes(searchTerm))
      );
    }
    if (extractedData.vehicle_model) {
      const modelSearchTerm = extractedData.vehicle_model.toLowerCase();
      if (!extractedData.vehicle_brand_or_name || extractedData.vehicle_brand_or_name.toLowerCase() !== modelSearchTerm) {
        baseCarList = baseCarList.filter(carro =>
          (carro.Model && carro.Model.toLowerCase().includes(modelSearchTerm)) || carro.Name.toLowerCase().includes(modelSearchTerm)
        );
      }
    }
    veiculosAlvoEncontradosNoEstoque = [...baseCarList]; 
    console.log(`${veiculosAlvoEncontradosNoEstoque.length} VE√çCULOS ALVO encontrados (ex: todos os Civics).`);

    carrosFiltradosParaExibicaoExata = [...veiculosAlvoEncontradosNoEstoque];

    if (extractedData.location) {
      const locationSearchTerm = extractedData.location.toLowerCase();
      carrosFiltradosParaExibicaoExata = carrosFiltradosParaExibicaoExata.filter(carro =>
        carro.Location.toLowerCase().includes(locationSearchTerm)
      );
    }

    let isUnrealisticPrice = false;
    let minActualPriceOfTargetVehicle = 0;

    if (extractedData.price_approx !== null && typeof extractedData.price_approx === 'number' && veiculosAlvoEncontradosNoEstoque.length > 0) {
      minActualPriceOfTargetVehicle = Math.min(...veiculosAlvoEncontradosNoEstoque.map(car => car.Price));

      const unrealisticThreshold = 0.4

      if (extractedData.price_approx < (minActualPriceOfTargetVehicle * unrealisticThreshold)) {
        isUnrealisticPrice = true;
        console.log(`Pre√ßo IRREAL detectado: Usu√°rio pediu R$${extractedData.price_approx}, mas o ${extractedData.vehicle_brand_or_name || ''} ${extractedData.vehicle_model || ''} mais barato custa R$${minActualPriceOfTargetVehicle}.`);
      }
    } 

    const carrosParaContextoDaIA = veiculosAlvoEncontradosNoEstoque.slice(0, 5).map(c => ({ // Aumentei para 5, se houver
      Name: c.Name,
      Model: c.Model,
      Price: c.Price,
      Location: c.Location
    }));

    let personaInstruction = "";

    if (isUnrealisticPrice) {
      const requestedPriceFormatted = extractedData.price_approx ? extractedData.price_approx.toLocaleString('pt-BR') : 'um valor muito baixo';
      const vehicleName = `${extractedData.vehicle_brand_or_name || ''} ${extractedData.vehicle_model || ''}`.trim();
      const minActualPriceFormatted = minActualPriceOfTargetVehicle > 0 ? minActualPriceOfTargetVehicle.toLocaleString('pt-BR') : 'um valor mais realista';

      personaInstruction = `
        INSTRU√á√ÉO ESPECIAL ADICIONAL PARA ESTA RESPOSTA: O usu√°rio pediu um ${vehicleName} por aproximadamente R$ ${requestedPriceFormatted}. No entanto, o ve√≠culo ${vehicleName} que encontramos custa a partir de R$ ${minActualPriceFormatted}, o que torna o pedido do usu√°rio BEM abaixo do valor de mercado.
        Ao iniciar sua resposta, voc√™ PODE fazer um coment√°rio levemente bem-humorado ou espirituoso sobre essa grande diferen√ßa de pre√ßo, ANTES de apresentar a op√ß√£o real de forma profissional.
        Por exemplo, um tom como: "Um ${vehicleName} por R$ ${requestedPriceFormatted}? Adoraria encontrar um para mim nesse pre√ßo tamb√©m! üòâ Mas, falando s√©rio, o que tenho aqui..." ou "R$ ${requestedPriceFormatted} por um ${vehicleName}? Essa seria a pechincha do s√©culo! üòÑ Bom, no mundo real, o ${vehicleName} que temos est√° dispon√≠vel por...".
        O objetivo √© um gracejo leve sobre o pre√ßo ser um sonho, sem zombar ou ofender o usu√°rio. Ap√≥s este coment√°rio inicial sobre o pre√ßo, siga as instru√ß√µes normais abaixo para apresentar o carro e ser persuasivo. Se o pre√ßo pedido n√£o fosse irreal, voc√™ ignoraria completamente esta instru√ß√£o especial.
      `;  
    }

    const responseGenerationPrompt = `
      Voc√™ √© o "DirigIA", um assistente de vendas de carros virtual amig√°vel, proativo e MUITO persuasivo. Seu objetivo principal √© ajudar o usu√°rio a encontrar um carro e convenc√™-lo a considerar as op√ß√µes dispon√≠veis, mesmo que n√£o sejam um match perfeito.
      ${personaInstruction} {/* A instru√ß√£o de persona ser√° inserida aqui se aplic√°vel */}
      O usu√°rio fez a seguinte busca: "${userMessage}"
      Com base nisso, entendemos que ele procura por: Marca/Nome: ${extractedData.vehicle_brand_or_name || 'N√£o especificado'}, Modelo: ${extractedData.vehicle_model || 'N√£o especificado'}, Localiza√ß√£o: ${extractedData.location || 'N√£o especificada'}, Pre√ßo Aproximado: R$ ${extractedData.price_approx ? extractedData.price_approx.toLocaleString('pt-BR') : 'N√£o especificado'}.

      Ap√≥s buscar em nosso estoque, estes foram os ve√≠culos da marca/modelo principal que encontramos (se houver):
      ${carrosParaContextoDaIA.length > 0 ? JSON.stringify(carrosParaContextoDaIA) : "Nenhum ve√≠culo da marca/modelo principal solicitado foi encontrado em nosso estoque."}

      Sua tarefa √© gerar uma resposta para o usu√°rio. Analise o pedido do usu√°rio e compare com os ve√≠culos encontrados. Seja um excelente vendedor!

      Instru√ß√µes para a resposta (IGNORE a instru√ß√£o de ironia acima se o pre√ßo pedido N√ÉO for irreal):

      1.  SE VE√çCULOS DA MARCA/MODELO PRINCIPAL FORAM ENCONTRADOS (${carrosParaContextoDaIA.length > 0}):
          a.  Primeiro, verifique se algum deles √© uma BOA CORRESPOND√äNCIA para a LOCALIZA√á√ÉO e PRE√áO (+/- 20%) pedidos pelo usu√°rio.
              - Se SIM (boa correspond√™ncia): √ìtimo! Apresente o(s) carro(s) entusiasticamente, destacando seus pontos positivos. Ex: "Boas not√≠cias! Encontrei o ${carrosParaContextoDaIA.length > 0 ? carrosParaContextoDaIA[0].Name + ' ' + carrosParaContextoDaIA[0].Model : 'carro'} que voc√™ procura em ${carrosParaContextoDaIA.length > 0 ? carrosParaContextoDaIA[0].Location : ''} por R$${carrosParaContextoDaIA.length > 0 ? carrosParaContextoDaIA[0].Price.toLocaleString('pt-BR') : ''}! √â uma excelente op√ß√£o, super completo..."
          b.  Se N√ÉO (os carros encontrados da marca/modelo principal diferem significativamente no pre√ßo ou est√£o em outra localidade):
              - Apresente o(s) ve√≠culo(s) encontrado(s) da marca/modelo principal, reconhecendo a diferen√ßa. Ex: "Encontrei o ${carrosParaContextoDaIA.length > 0 ? carrosParaContextoDaIA[0].Name + ' ' + carrosParaContextoDaIA[0].Model : 'carro'} que voc√™ quer! Ele est√° em ${carrosParaContextoDaIA.length > 0 ? carrosParaContextoDaIA[0].Location : ''} e o pre√ßo √© R$${carrosParaContextoDaIA.length > 0 ? carrosParaContextoDaIA[0].Price.toLocaleString('pt-BR') : ''}."
              - IMEDIATAMENTE AP√ìS, tente convencer o usu√°rio sobre esses carros. Justifique o pre√ßo (se mais alto, destaque valor, condi√ß√£o, √≠tens de s√©rie, etc.). Se for outra localidade, minimize a dist√¢ncia ou sugira a visita como uma oportunidade. Ex: "Sei que voc√™ mencionou R$${extractedData.price_approx ? extractedData.price_approx.toLocaleString('pt-BR') : 'X'}, mas esta unidade est√° impec√°vel, √© super completa e √© um √≥timo investimento pela qualidade e baixa quilometragem. Ou, sobre a localiza√ß√£o, ${carrosParaContextoDaIA.length > 0 ? carrosParaContextoDaIA[0].Location : ''} n√£o √© t√£o longe e pode valer a viagem pela qualidade do carro que encontrei para voc√™!"
              - SE a diferen√ßa for muito grande ou o usu√°rio parecer hesitante, SEJA PROATIVO E OFERE√áA AJUDA ADICIONAL: Ofere√ßa buscar alternativas mais alinhadas. Ex: "Mas entendo que talvez este n√£o seja exatamente o que voc√™ tinha em mente. Se este n√£o te agradar 100%, me diga! Podemos refinar a busca: quer que eu procure outros modelos na sua faixa de pre√ßo de R$${extractedData.price_approx ? extractedData.price_approx.toLocaleString('pt-BR') : 'X'}, ou talvez que eu ajuste os filtros para outras localidades? O que acha de explorarmos outras op√ß√µes juntos?"

      2.  SE NENHUM VE√çCULO DA MARCA/MODELO PRINCIPAL FOI ENCONTRADO NO ESTOQUE (${carrosParaContextoDaIA.length === 0}):
          - Seja emp√°tico, mas IMEDIATAMENTE PROATIVO E PERSUASIVO: "Poxa, infelizmente n√£o tenho nenhum ${extractedData.vehicle_brand_or_name || ''} ${extractedData.vehicle_model || ''} como voc√™ pediu no estoque neste exato momento. Mas n√£o se preocupe, minha especialidade √© justamente encontrar o carro certo para cada pessoa!"
          - Sugira ativamente ajustar os filtros do pedido original: "Para te ajudar a encontrar uma joia, que tal explorarmos algumas alternativas? Se voc√™ tiver um pouco de flexibilidade no seu or√ßamento de R$${extractedData.price_approx ? extractedData.price_approx.toLocaleString('pt-BR') : 'que voc√™ mencionou'}, ou se pudermos considerar cidades vizinhas √† ${extractedData.location || 'regi√£o desejada'}, um novo leque de op√ß√µes pode se abrir! Muitas vezes, um pequeno ajuste na busca revela carros incr√≠veis."
          - Ofere√ßa buscar outros tipos de carro, tentando entender a necessidade: "Al√©m disso, posso procurar outros modelos ou marcas que s√£o excelentes e podem se encaixar perfeitamente no seu or√ßamento e na localidade que voc√™ prefere. Voc√™ estaria aberto a conhecer outras op√ß√µes que t√™m agradado muito nossos clientes e que podem te surpreender? Qual o principal uso que voc√™ far√° do carro?"
          - Fa√ßa perguntas para entender melhor a necessidade e manter o di√°logo: "O que √© mais importante para voc√™ neste momento: √© manter-se estritamente neste modelo, ou voc√™ prioriza mais a faixa de pre√ßo, o tipo de carro (SUV, sedan, hatch), ou algum item espec√≠fico? Com mais alguns detalhes, posso refinar a busca e te apresentar algo que voc√™ vai amar!"

      Lembre-se: sua tarefa √© gerar uma MENSAGEM DE TEXTO para o usu√°rio. Sua resposta final DEVE ser em linguagem natural e conversacional. NUNCA retorne um objeto JSON ou qualquer estrutura de c√≥digo como resposta final para o usu√°rio.
      A resposta deve ser apenas o texto para o usu√°rio, sem sauda√ß√µes repetitivas como "Ol√°!". Seja conciso, mas completo e, acima de tudo, CONVINCENTE e PRESTATIVO.
    `;

    const responseGenerationResult = await model.generateContent(responseGenerationPrompt);
    const responseGenerationResponse = await responseGenerationResult.response;
    aiFinalResponseText = responseGenerationResponse.text().trim();
    console.log('Resposta final gerada pela IA:', aiFinalResponseText);

    let foundCars = carrosFiltradosParaExibicaoExata.length > 0 ? carrosFiltradosParaExibicaoExata : veiculosAlvoEncontradosNoEstoque.slice(0,3);

    res.json({
      ai_interpretation: extractedData,
      original_message: userMessage,
      ai_response_text: aiFinalResponseText,
      found_cars: foundCars
    });

  } catch (e) {
    console.error('Erro no endpoint /api/search:', e);
    let errorMessage = 'Ocorreu um erro interno no servidor ao processar sua solicita√ß√£o.';
    if (e.message.includes("JSON.parse")) {
      errorMessage = 'Erro ao processar a interpreta√ß√£o inicial da sua mensagem. Por favor, tente reformular.';
    } else if (e.response && e.response.status === 503) {
      errorMessage = 'Desculpe, estou com um pouco de dificuldade para me conectar com minha intelig√™ncia. Tente novamente em alguns instantes.';
    }
    res.status(500).json({ error: errorMessage, details: e.message });
  }
});

app.listen(PORT, () => {
  console.log(`Servidor DirigIA rodando na porta ${PORT}`);
});